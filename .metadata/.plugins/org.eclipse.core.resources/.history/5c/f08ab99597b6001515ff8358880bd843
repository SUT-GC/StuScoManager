package dao;

import java.util.List;

import org.hibernate.Session;
import org.hibernate.Transaction;

import util.HibernateUtil;
import entity.Teacher;
/*
 * 对Teacher进行数据库操作的类
 */
public class TeacherDao {
	/*
	 * 插入一个teacher
	 * 1:插入成功
	 * 0:该teacher的Id已经存在
	 */
	public static int insertTeacher(Teacher teacher){
		Session session = HibernateUtil.currentSession();
		Transaction transaction = session.beginTransaction();
		if(session.get(Teacher.class, teacher.getId()) == null){
			session.save(teacher);
			transaction.commit();
			HibernateUtil.closeSession();
			return 1;
		}else{
			HibernateUtil.closeSession();
			return 0;
		}
	}
	/*
	 * 根据T_ID查询教师
	 */
	public static Teacher selectTeacherById(String id){
		Session session = HibernateUtil.currentSession();
		Transaction transaction = session.beginTransaction();
		Teacher teacher = null;
		teacher = (Teacher) session.get(Teacher.class, id);
		transaction.commit();
		HibernateUtil.closeSession();
		return teacher;
	}
	
	/*
	 * 根据教师姓名查询记录
	 */
	public static List selectTeacherByName(String teachername){
		Session session = HibernateUtil.currentSession();
		Transaction transaction = session.beginTransaction();
		
		List list = session.createQuery("from Teacher t where t.name like ?").setString(0, "%"+teachername+"%").list();
		
		transaction.commit();
		HibernateUtil.closeSession();
		
		return list;
	}
	
	/*
	 * 根据教师id删除教师
	 * 0:未找到该id的教师
	 * 1:删除成功
	 */
	
	public static int deleteTeacherById(String teacherid){
		Session session = HibernateUtil.currentSession();
		Transaction transaction = session.beginTransaction();
		
		Teacher teacher = null;
		
		teacher = (Teacher)session.get(Teacher.class, teacherid);
		
		if(teacher == null){
			transaction.commit();
			HibernateUtil.closeSession();
			return 0;
		}else{
			session.delete(teacher);
			transaction.commit();
			HibernateUtil.closeSession();
			return 1;
		}
	}
	
	/*
	 * 查询所有的Teacher
	 */
	public static List selectAllTeacher(){
		Session session = HibernateUtil.currentSession();
		Transaction transaction = session.beginTransaction();
		List list = session.createQuery("from Teacher").list();
		transaction.commit();
		HibernateUtil.closeSession();
		return list;
	}
	
	/*
	 * 根据旧的id更新teacher
	 * -1:没有查到该id的teacher
	 * 1:更新成功
	 * 0:该id冲突
	 */
	public static int updateTeacherById(String oldteachername, Teacher newTeacher){
		Session session = HibernateUtil.currentSession();
		Transaction transaction = session.beginTransaction();
		
		int result = -1;
		
		Teacher teacher = null;
		if((teacher = (Teacher) session.get(Teacher.class, oldteachername)) != null){
			if(newTeacher.getPassword().equals("")){
				newTeacher.setPassword(teacher.getPassword());
			}
			session.delete(teacher);
		}
		
		transaction.commit();
		HibernateUtil.closeSession();
		
		result = TeacherDao.insertTeacher(newTeacher);
		
		return result;
	}
}
